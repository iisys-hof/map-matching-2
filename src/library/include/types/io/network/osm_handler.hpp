// Copyright (C) 2020-2024 Adrian WÃ¶ltche
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see https://www.gnu.org/licenses/.

#ifndef MAP_MATCHING_2_TYPES_IO_NETWORK_OSM_HANDLER_HPP
#define MAP_MATCHING_2_TYPES_IO_NETWORK_OSM_HANDLER_HPP

#include <variant>
#include <memory>

#include "types/extern_define.hpp"

#include "types/io/helper/graph_helper.hpp"
#include "types/io/helper/osm_handler_helper.hpp"

#include "io/network/osm_handler.hpp"

#define MM2_OSM_HANDLER(GRAPH_HELPER_TYPE, OSM_HANDLER_HELPER_TYPE) \
    map_matching_2::io::network::osm_handler<GRAPH_HELPER_TYPE, OSM_HANDLER_HELPER_TYPE>

#define MM2_OSM_HANDLER_VARIANT_GRAPH_INDEX_OSM_TYPE(GRAPH_HELPER_TYPE, OSM_HANDLER_HELPER_TYPE) \
    std::unique_ptr<MM2_OSM_HANDLER(UNPACK GRAPH_HELPER_TYPE, UNPACK OSM_HANDLER_HELPER_TYPE)>

#define MM2_OSM_HANDLER_VARIANT_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, OSM_TYPES) \
    MM2_OSM_HANDLER_VARIANT_GRAPH_INDEX_OSM_TYPE(GRAPH_HELPER_TYPE, (MM2_OSM_HANDLER_HELPER(CS, OSM_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MEMORY_TYPES)))), \
    MM2_OSM_HANDLER_VARIANT_GRAPH_INDEX_OSM_TYPE(GRAPH_HELPER_TYPE, (MM2_OSM_HANDLER_HELPER(CS, OSM_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MMAP_TYPES))))

#define MM2_OSM_HANDLER_VARIANT(CS, GRAPH_HELPER_TYPE) std::variant< \
    MM2_OSM_HANDLER_VARIANT_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, MM2_MEMORY_TYPES), \
    MM2_OSM_HANDLER_VARIANT_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, MM2_MMAP_TYPES)>

#ifdef EXPLICIT_TEMPLATES

#define MM2_OSM_HANDLER_TEMPLATE(GRAPH_HELPER_TYPE, OSM_HANDLER_HELPER_TYPE) \
    MM2_EXTERN template class MM2_OSM_HANDLER(UNPACK GRAPH_HELPER_TYPE, UNPACK OSM_HANDLER_HELPER_TYPE);

#define MM2_OSM_HANDLER_TEMPLATE_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, OSM_TYPES) \
    MM2_OSM_HANDLER_TEMPLATE(GRAPH_HELPER_TYPE, (MM2_OSM_HANDLER_HELPER(CS, OSM_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MEMORY_TYPES)))) \
    MM2_OSM_HANDLER_TEMPLATE(GRAPH_HELPER_TYPE, (MM2_OSM_HANDLER_HELPER(CS, OSM_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MMAP_TYPES))))

#define MM2_OSM_HANDLER_TEMPLATE_CS_INDEX_TYPE(CS, GRAPH_HELPER_TYPE) \
    MM2_OSM_HANDLER_TEMPLATE_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, MM2_MEMORY_TYPES) \
    MM2_OSM_HANDLER_TEMPLATE_CS_OSM_HANDLER_HELPER_TYPE(CS, GRAPH_HELPER_TYPE, MM2_MMAP_TYPES)

#define MM2_OSM_HANDLER_TEMPLATE_CS_GRAPH_TYPES(CS, GRAPH_TYPES) \
    MM2_OSM_HANDLER_TEMPLATE_CS_INDEX_TYPE(CS, (MM2_GRAPH_HELPER_IMPORT(CS, GRAPH_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MEMORY_TYPES)))) \
    MM2_OSM_HANDLER_TEMPLATE_CS_INDEX_TYPE(CS, (MM2_GRAPH_HELPER_IMPORT(CS, GRAPH_TYPES, MM2_IMPORT_TAG_HELPER(MM2_MMAP_TYPES))))

#define MM2_OSM_HANDLER_TEMPLATE_CS(CS) \
    MM2_OSM_HANDLER_TEMPLATE_CS_GRAPH_TYPES(CS, MM2_MEMORY_TYPES) \
    MM2_OSM_HANDLER_TEMPLATE_CS_GRAPH_TYPES(CS, MM2_MMAP_TYPES)

MM2_OSM_HANDLER_TEMPLATE_CS(MM2_GEOGRAPHIC)
MM2_OSM_HANDLER_TEMPLATE_CS(MM2_SPHERICAL_EQUATORIAL)
MM2_OSM_HANDLER_TEMPLATE_CS(MM2_CARTESIAN)

#endif

namespace map_matching_2::io::network {

    template<typename GraphHelper,
        typename CoordinateSystem = typename geometry::data<typename
            GraphHelper::vertex_data_type::point_type>::coordinate_system_type>
    using osm_handler_variant_type = MM2_OSM_HANDLER_VARIANT(CoordinateSystem, (GraphHelper));

}

#endif //MAP_MATCHING_2_TYPES_IO_NETWORK_OSM_HANDLER_HPP
